name: homelab

services:

### Monitoring Stack ###

  grafanaAppMonitoring:
    image: grafana/grafana:latest
    container_name: grafanaAppMonitoring
    hostname: monitoring.${DOMAIN}
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_GF_SECURITY_ADMIN_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=grafanaDbMonitoring
      - GF_DATABASE_PORT=5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${GRAFANA_DB_USER_NAME}
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_USER_PASS}
      - GF_SERVER_ROOT_URL=https://monitoring.${DOMAIN}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    restart: unless-stopped
    depends_on:
      - grafanaDbMonitoring
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.http.routers.monitoring.entrypoints=http
      - traefik.http.routers.monitoring.rule=Host(`monitoring.${DOMAIN}`)
      - traefik.http.routers.monitoring.middlewares=traefik-https-redirect
      - traefik.http.routers.monitoring-secure.entrypoints=https
      - traefik.http.routers.monitoring-secure.rule=Host(`monitoring.${DOMAIN}`)
      - traefik.http.routers.monitoring-secure.tls=true
      - traefik.http.routers.monitoring-secure.service=monitoring
      - traefik.http.services.monitoring.loadbalancer.server.port=3000

  grafanaDbMonitoring:
    image: postgres:16
    container_name: grafanaDbMonitoring
    environment:
      - POSTGRES_DB=grafana
      - POSTGRES_USER=${GRAFANA_DB_USER_NAME}
      - POSTGRES_PASSWORD=${GRAFANA_DB_USER_PASS}
    volumes:
      - '/data/bindmounts/grafana/db:/var/lib/postgresql/data'
      - '/data/bindmounts/grafana/backup:/backup'
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    restart: unless-stopped

  influxdbPve:
    image: "influxdb:latest"
    container_name: influxdbPve
    hostname: "influxpve.${DOMAIN}"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_PVE_INFLUXDB_ADMIN}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PVE_INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=home
      - DOCKER_INFLUXDB_INIT_BUCKET=proxmox
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_PVE_DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - TZ= 'Europe/Berlin'
    volumes:
      - '/data/bindmounts/influx/conf:/etc/influxdb2'
      - '/data/bindmounts/influx/data:/var/lib/influxdb2'
      - '/data/bindmounts/influx/backup:/backup'
      - '/etc/localtime:/etc/localtime:ro'
    dns:
      - "${DNS_SERVER}"
    networks: {web: {ipv4_address: "172.21.0.101"}}
    restart: unless-stopped
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.http.routers.influxpve.entrypoints=http
      - traefik.http.routers.influxpve.rule=Host(`influxpve.${DOMAIN}`)
      - traefik.http.routers.influxpve.middlewares=traefik-https-redirect
      - traefik.http.routers.influxpve-secure.entrypoints=https
      - traefik.http.routers.influxpve-secure.rule=Host(`influxpve.${DOMAIN}`)
      - traefik.http.routers.influxpve-secure.tls=true
      - traefik.http.routers.influxpve-secure.service=influxpve
      - traefik.http.services.influxpve.loadbalancer.server.port=8086

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus.${DOMAIN}
    user: root
    volumes:
      - '/data/bindmounts/prometheus/config:/etc/prometheus'
      - '/data/bindmounts/prometheus/data:/prometheus'
      - '/etc/localtime:/etc/localtime:ro'
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.http.routers.prometheus.entrypoints=prometheus
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.middlewares=traefik-https-redirect
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      #Secure
      - traefik.http.routers.prometheus-secure.entrypoints=https
      - 'traefik.http.routers.prometheus-secure.rule=Host(`prometheus.${DOMAIN}`)'
      - traefik.http.routers.prometheus-secure.tls=true
      - traefik.http.routers.prometheus-secure.service=prometheus

  loki:
    image: grafana/loki:latest
    container_name: loki
    hostname: loki.${DOMAIN}
    volumes:
      - '/data/bindmounts/loki:/etc/loki'
      - '/etc/localtime:/etc/localtime:ro'
    command: 
      - '-config.file=/etc/loki/local-config.yaml'
      - '-config.expand-env=true'
      - '-validation.allow-structured-metadata=false'
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    restart: unless-stopped
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.tcp.routers.loki.entrypoints=loki
      - "traefik.tcp.routers.loki.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.loki.service=loki"
      - traefik.tcp.services.loki.loadbalancer.server.port=3100

  unpoller:
    image: ghcr.io/unpoller/unpoller:latest
    container_name: unpoller
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    environment:
      - UP_INFLUXDB_DISABLE=true
      - UP_POLLER_DEBUG=false
      - UP_UNIFI_DYNAMIC=false
      - UP_PROMETHEUS_HTTP_LISTEN=0.0.0.0:9130
      - UP_PROMETHEUS_NAMESPACE=unpoller
      - UP_UNIFI_CONTROLLER_0_PASS=${UP_UNIFI_CONTROLLER_0_PASS}
      - UP_UNIFI_CONTROLLER_0_SAVE_ALARMS=true
      - UP_UNIFI_CONTROLLER_0_SAVE_ANOMALIES=true
      - UP_UNIFI_CONTROLLER_0_SAVE_DPI=true
      - UP_UNIFI_CONTROLLER_0_SAVE_EVENTS=true
      - UP_UNIFI_CONTROLLER_0_SAVE_IDS=true
      - UP_UNIFI_CONTROLLER_0_SAVE_SITES=true
      - UP_UNIFI_CONTROLLER_0_URL=https://${DNS_SERVER}
      - UP_UNIFI_CONTROLLER_0_USER=${UP_UNIFI_CONTROLLER_0_USER}
    restart: unless-stopped

  blackbox_exporter:
    image: prom/blackbox-exporter:master
    container_name: blackbox_exporter
    volumes:
      - '/data/bindmounts/blackbox/blackbox.yml:/config/blackbox.yml'
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    restart: unless-stopped

### Notifications ###

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    hostname: notify.${DOMAIN}
    command:
      - serve
    environment:
      - TZ='Europe/Berlin'
      - NTFY_BASE_URL=https://notify.${DOMAIN}
      - NTFY_CACHE_FILE=/var/cache/ntfy/cache.db
      - NTFY_AUTH_FILE=/var/lib/ntfy/auth.db
      - NTFY_AUTH_DEFAULT_ACCESS=deny-all
      - NTFY_BEHIND_PROXY=true
      - NTFY_ATTACHMENT_CACHE_DIR=/var/lib/ntfy/attachments
      - NTFY_ENABLE_LOGIN=true
      - NTFY_SMTP_SERVER_LISTEN=:25
      - NTFY_SMTP_SERVER_DOMAIN=local.org
      - NTFY_SMTP_SERVER_ADDR_PREFIX=ntfy-
    volumes:
      - '/data/bindmounts/ntfy/cache:/var/cache/ntfy'
      - '/data/bindmounts/ntfy/db:/var/lib/ntfy'
    healthcheck: # optional: remember to adapt the host:port to your environment
        test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
        interval: 60s
        timeout: 10s
        retries: 3
        start_period: 40s
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.http.routers.notify.entrypoints=http
      - traefik.http.routers.notify.rule=Host(`notify.${DOMAIN}`)
      - traefik.http.routers.notify.middlewares=traefik-https-redirect
      - traefik.http.routers.notify-secure.entrypoints=https
      - traefik.http.routers.notify-secure.rule=Host(`notify.${DOMAIN}`)
      - traefik.http.routers.notify-secure.tls=true
      - traefik.http.routers.notify-secure.service=notify
      - traefik.http.services.notify.loadbalancer.server.port=80

  gotify2ntfy:
    image: 'levantinlynx/gotify-to-ntfy-proxy:latest'
    container_name: gotify2ntfy
    hostname: gotify2ntfy.${DOMAIN}
    volumes:
      - '/data/bindmounts/gotify2ntfy/topics.js:/home/node/app/topics.js'
    ports:
      - '8008:8008'
    environment:
      - RELAY_HOST_IP=0.0.0.0
      - RELAY_PORT=8008
      - NTFY_SERVER=http://ntfy
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped

  grafana2ntfy:
    image: saibe1111/grafana-to-ntfy
    container_name: grafana2ntfy
    hostname: grafana2ntfy.${DOMAIN}
    environment:
      NTFY_TOPIC: monitoring
      NTFY_SERVER: http://ntfy
      NTFY_TOKEN: ${NTFY_TOKEN}
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped

### Storage ###

  samba:
    image: dperson/samba
    container_name: smb
    hostname: smb.${DOMAIN}
    environment:
      TZ: 'Europe/Berlin'
    dns:
      - "${DNS_SERVER}"
    network_mode: web
    read_only: true
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true
    volumes:
      - /data/shares/scans:/mnt/data/scans:z
      - /data/shares/drucker:/mnt/data/drucker:z
    command: '-s "drucker;/mnt/data/drucker;yes;no;no;nodes" -s "scans;/mnt/data/scans;yes;no;no;nodes" -u "${SMB_BACKUP_USER};${SMB_BACKUP_PW}" -p'
    restart: unless-stopped
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.tcp.routers.smb445.entrypoints=smb445
      - "traefik.tcp.routers.smb445.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.smb445.service=smb445"
      - traefik.tcp.services.smb445.loadbalancer.server.port=445
      - traefik.tcp.routers.smb139.entrypoints=smb139
      - "traefik.tcp.routers.smb139.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.smb139.service=smb139"
      - traefik.tcp.services.smb139.loadbalancer.server.port=139
      - traefik.udp.routers.smb137.entrypoints=smb137
      - "traefik.udp.routers.smb137.service=smb137"
      - traefik.udp.services.smb137.loadbalancer.server.port=137
      - traefik.udp.routers.smb138.entrypoints=smb138
      - "traefik.udp.routers.smb138.service=smb138"
      - traefik.udp.services.smb138.loadbalancer.server.port=138

### IdP ###

  authentikDb:
    image: docker.io/library/postgres:16-alpine
    container_name: authentikDb
    hostname: authentikdb.${DOMAIN}
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_DB_PASS}
      POSTGRES_USER: ${AUTHENTIK_DB_USER}
      POSTGRES_DB: ${AUTHENTIK_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - '/data/bindmounts/authentik/db:/var/lib/postgresql/data'
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped

  authentikRedis:
    image: docker.io/library/redis:alpine
    container_name: authentikRedis
    hostname: authentikredis.${DOMAIN}
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - '/data/bindmounts/authentik/redis:/data'
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped

  authentikServer:
    image: ghcr.io/goauthentik/server:2025.2.4
    container_name: authentikServer
    hostname: authentikserver.${DOMAIN}
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: authentikRedis
      AUTHENTIK_POSTGRESQL__HOST: authentikDb
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASS}
    volumes:
      - '/data/bindmounts/authentik/media:/media'
      - '/data/bindmounts/authentik/custom-templates:/templates'
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped
    depends_on:
      authentikDb:
        condition: service_healthy
      authentikRedis:
        condition: service_healthy
    labels:
    # Traefik
      - traefik.enable=true
      - traefik.http.routers.idp.entrypoints=http
      - traefik.http.routers.idp.rule=Host(`idp.${DOMAIN}`)
      - traefik.http.routers.idp.middlewares=traefik-https-redirect
      - traefik.http.routers.idp-secure.entrypoints=https
      - traefik.http.routers.idp-secure.rule=Host(`idp.${DOMAIN}`)
      - traefik.http.routers.idp-secure.tls=true
      - traefik.http.routers.idp-secure.service=idp
      - traefik.http.services.idp.loadbalancer.server.port=9000

  authentikWorker:
    image: ghcr.io/goauthentik/server:2025.2.4
    container_name: authentikWorker
    hostname: authentikworker.${DOMAIN}
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: authentikRedis
      AUTHENTIK_POSTGRESQL__HOST: authentikDb
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASS}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASS}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/data/bindmounts/authentik/media:/media'
      - '/data/bindmounts/authentik/certs:/certs'
      - '/data/bindmounts/authentik/custom-templates:/templates'
    network_mode: web
    dns:
      - "${DNS_SERVER}"
    restart: unless-stopped
    depends_on:
      authentikDb:
        condition: service_healthy
      authentikRedis:
        condition: service_healthy

networks:
  web:
    external: true
